#version 430

layout (local_size_x = 64) in;

@include <utility.h>
@include <bound_n_split.h>

uniform uint batch_size;
uniform uint batch_offset;

// Patch range stack arrays
layout (std430) buffer stack_min
{
    vec2 smin[];
};

layout (std430) buffer stack_max
{
    vec2 smax[];
};

// 8 MSB: stack depth
// 24 LSB: patch id
layout (std430) buffer stack_pid
{
    uint spid[];
};

// Array of packed flags
// first component is set to 1 if patch is split
// second component is set to 1 if patch is drawn
layout (std430) buffer flag_pad
{
    uvec2 fpad[];
};

// Pads for placing split patches 
layout (std430) buffer split_pad_pid
{
    uint sp_pid[];
};

layout (std430) buffer split_pad1_min
{
    vec2 sp1_min[];
};

layout (std430) buffer split_pad1_max
{
    vec2 sp1_max[];
};

layout (std430) buffer split_pad2_min
{
    vec2 sp2_min[];
};

layout (std430) buffer split_pad2_max
{
    vec2 sp2_max[];
};


void do_vsplit(uint bid, vec2 pmin, vec2 pmax, uint pid, uint depth)
{
    float c = mix(pmin.y, pmax.y, 0.5);

    sp_pid[bid] = pid | (depth << 24);

    sp1_min[bid] = pmin;
    sp1_max[bid] = vec2(pmax.x, c);

    sp2_min[bid] = vec2(pmin.x, c);
    sp2_max[bid] = pmax;
}

void do_hsplit(uint bid, vec2 pmin, vec2 pmax, uint pid, uint depth)
{
    float c = mix(pmin.x, pmax.x, 0.5);

    sp_pid[bid] = pid | (depth << 24);

    sp1_min[bid] = pmin;
    sp1_max[bid] = vec2(c, pmax.y);

    sp2_min[bid] = vec2(c, pmin.y);
    sp2_max[bid] = pmax;
}


void main (void)
{
    uint bid = gl_GlobalInvocationID.x;
    uint sid = bid + batch_offset;

    if (bid >= batch_size) return;
    
    uint rpid = spid[sid] & 0xffffff;
    uint rdepth = spid[sid] >> 24;
    vec2 rmin = smin[sid];
    vec2 rmax = smax[sid];

    uint bound_flag = bound(rpid, rmin, rmax, rdepth);

    fpad[bid] = uvec2((bound_flag>>1)&1, (bound_flag>>0)&1);

    if ((bound_flag & 2) != 0) {
        if ((bound_flag & 4) != 0) {
            do_vsplit(bid, rmin, rmax, rpid, rdepth+1);
        } else {
            do_hsplit(bid, rmin, rmax, rpid, rdepth+1);
        }
    }            
}
