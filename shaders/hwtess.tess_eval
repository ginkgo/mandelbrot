#version 430

@include <noise/noise3D.glsl>

layout(quads, equal_spacing, ccw) in;

uniform mat4 mv;
uniform mat4 mvp;
uniform samplerBuffer patches;

out vec3 p_eye;
out vec3 n_eye;
out vec3 tex_coord;

vec3 eval_patch(vec2 t, int patch_id)
{
    vec2 s = 1 - t;

    mat4 B = outerProduct(vec4(s.x*s.x*s.x, 3*s.x*s.x*t.x, 3*s.x*t.x*t.x, t.x*t.x*t.x),
                          vec4(s.y*s.y*s.y, 3*s.y*s.y*t.y, 3*s.y*t.y*t.y, t.y*t.y*t.y));                          
    
    vec3 sum = vec3(0,0,0);
    for (int u = 0; u < 4; ++u) {
        for (int v = 0; v < 4; ++v) {
            sum += B[v][u] * texelFetch(patches, u + v * 4 + patch_id * 16).xyz;
        }
    }

    return sum;
}

void main()
{
    vec2 t = mix(mix(gl_in[0].gl_Position.xy, gl_in[1].gl_Position.xy, gl_TessCoord.x),
                 mix(gl_in[3].gl_Position.xy, gl_in[2].gl_Position.xy, gl_TessCoord.x), gl_TessCoord.y);

    int patch_id = int(gl_in[0].gl_Position.z);
    
    vec3 p = eval_patch(t, patch_id);
    vec3 px = eval_patch(t+vec2(0.001,0), patch_id);
    vec3 py = eval_patch(t+vec2(0,0.001), patch_id);
    vec3 n = normalize(cross(px-p,py-p));

    float disp = snoise(p*0.5) + snoise(p*1.0) * 0.5 + snoise(p*2.0) * 0.25;
    disp = snoise(vec3(disp * 8,0,0) * 0.25);
    p += 0.04 * n * disp;
    
    tex_coord = vec3(t, patch_id);
    p_eye = vec3(mv * vec4(p,1));
    n_eye = vec3(mv * vec4(n,0));
    
    gl_Position  = mvp * vec4(p,1);
}
