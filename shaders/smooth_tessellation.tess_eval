#version 420 compatibility

uniform mat4 proj;

layout (quads, equal_spacing, ccw) in;
in vec3 cPos[];
//out vec3 pos;
out vec4 color;

vec3 eval_spline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)
{
    float s = 1-t;
    return s*s*s*p0 + 3*s*s*t*p1 + 3*s*t*t*p2 + t*t*t*p3;
}


vec3 eval_pos(vec2 coord)
{
    vec3 p0 = eval_spline(cPos[ 0], cPos[ 1], cPos[ 2], cPos[ 3], coord.x);
    vec3 p1 = eval_spline(cPos[ 4], cPos[ 5], cPos[ 6], cPos[ 7], coord.x);
    vec3 p2 = eval_spline(cPos[ 8], cPos[ 9], cPos[10], cPos[11], coord.x);
    vec3 p3 = eval_spline(cPos[12], cPos[13], cPos[14], cPos[15], coord.x);

    return eval_spline(p0, p1, p2, p3, coord.y);
}

vec3 eval_n_displace(vec2 coord)
{
    vec3 pos = eval_pos(coord);

    // Do some funky displacement
    pos.x += sin(pos.y*15) * 0.04f;
    pos.y += sin(pos.x*15) * 0.04f;
    pos.z += sin(pos.x*15) * sin(pos.y*15) * 0.04f;

    return pos;
}

void main()
{
    vec3 pos = eval_n_displace(gl_TessCoord.xy);
    vec3 u = eval_n_displace(gl_TessCoord.xy + vec2(0.01, 0)) - pos;
    vec3 w = eval_n_displace(gl_TessCoord.xy + vec2(0, 0.01)) - pos;

    vec3 n = normalize(cross(u,w));

    vec3 l = normalize(vec3(4,3,8));

    vec3 v = -normalize(pos);

    vec4 dc = vec4(0.8, 0.05, 0.01, 1);
    vec4 sc = vec4(1, 1, 1, 1);
        
    vec3 h = normalize(l+v);
        
    float sh = 30.0;

    color  = max(dot(n,l),0.0) * dc + pow(max(dot(n,h), 0.0), sh) * sc;

    gl_Position = proj * vec4(pos,1);
}
