#version 420 compatibility

layout (quads, equal_spacing, ccw) in;
in vec3 cPos[];
in vec4 chPos[];
out vec3 pos;


vec3 eval_spline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)
{
    float s = 1-t;
    return s*s*s*p0 + 3*s*s*t*p1 + 3*s*t*t*p2 + t*t*t*p3;
}

vec3 eval_pos()
{
    vec3 p0 = eval_spline(cPos[ 0], cPos[ 1], cPos[ 2], cPos[ 3], gl_TessCoord.y);
    vec3 p1 = eval_spline(cPos[ 4], cPos[ 5], cPos[ 6], cPos[ 7], gl_TessCoord.y);
    vec3 p2 = eval_spline(cPos[ 8], cPos[ 9], cPos[10], cPos[11], gl_TessCoord.y);
    vec3 p3 = eval_spline(cPos[12], cPos[13], cPos[14], cPos[15], gl_TessCoord.y);

    return eval_spline(p0, p1, p2, p3, gl_TessCoord.x);
}


vec4 eval_spline(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t)
{
    float s = 1-t;
    return s*s*s*p0 + 3*s*s*t*p1 + 3*s*t*t*p2 + t*t*t*p3;
}

vec4 eval_hPos()
{
    vec4 p0 = eval_spline(chPos[ 0], chPos[ 1], chPos[ 2], chPos[ 3], gl_TessCoord.y);
    vec4 p1 = eval_spline(chPos[ 4], chPos[ 5], chPos[ 6], chPos[ 7], gl_TessCoord.y);
    vec4 p2 = eval_spline(chPos[ 8], chPos[ 9], chPos[10], chPos[11], gl_TessCoord.y);
    vec4 p3 = eval_spline(chPos[12], chPos[13], chPos[14], chPos[15], gl_TessCoord.y);

    return eval_spline(p0, p1, p2, p3, gl_TessCoord.x);
}

void main()
{
    pos = eval_pos();
    gl_Position = eval_hPos();
}