/******************************************************************************\
 * This file is part of Micropolis.                                           *
 *                                                                            *
 * Micropolis is free software: you can redistribute it and/or modify         *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 3 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * Micropolis is distributed in the hope that it will be useful,              *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with Micropolis.  If not, see <http://www.gnu.org/licenses/>.        *
\******************************************************************************/


#version 420 compatibility

uniform mat4 proj;

layout (quads, equal_spacing, ccw) in;
in vec3 cPos[];
out vec3 pos;


vec3 eval_spline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)
{
    float s = 1-t;
    return s*s*s*p0 + 3*s*s*t*p1 + 3*s*t*t*p2 + t*t*t*p3;
}


vec3 eval_pos()
{
    vec3 p0 = eval_spline(cPos[ 0], cPos[ 1], cPos[ 2], cPos[ 3], gl_TessCoord.x);
    vec3 p1 = eval_spline(cPos[ 4], cPos[ 5], cPos[ 6], cPos[ 7], gl_TessCoord.x);
    vec3 p2 = eval_spline(cPos[ 8], cPos[ 9], cPos[10], cPos[11], gl_TessCoord.x);
    vec3 p3 = eval_spline(cPos[12], cPos[13], cPos[14], cPos[15], gl_TessCoord.x);

    return eval_spline(p0, p1, p2, p3, gl_TessCoord.y);
}


void main()
{
    pos = eval_pos();

    // Do some funky displacement
    pos.x += sin(pos.y*15) * 0.04f;
    pos.y += sin(pos.x*15) * 0.04f;
    pos.z += sin(pos.x*15) * sin(pos.y*15) * 0.04f;

    gl_Position = proj * vec4(pos,1);
}
