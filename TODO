
TODO:

* Make CL::TransferBuffer use pinned memory again
* Refactor OpenCL wrappers
  * Split into individual files
  * Make Events shareable within device
  * Add device-level trace generation
  * Dump trace when pressing button
  * User-events
* Rename OpenCL{Renderer,BoundNSplit}
* GPU-based Bound&Split for OpenCL Renderer
  * Keep CPU-version available for comparison
* Pipeline drawcalls over several command-queues
* Implement Gregory patches (+Blender export script for catmull-clark)
* Write polygon size estimation shader
* Implement dynamic-rate dicing
* Switch readme to markdown/textile or something like that
* Add SCons build dir and config-option

* Read 'Fast GPU-based Adaptive Tessellation with CUDA'

* Shader system
  * Use Python for generation/compilation
  * Noise functions

* Use GL sync objects once available

* Implement multisampling
* Implement stochastic rasterization

DONE

* Fix range_id/patch_id name inconsistencies
* Rename PatchesIndex to PatchIndex
* Fix configgen.py warning issues and switch to Python3+Wheezy
* Switch formatMapGen to Python3+Wheezy
* Add to github
* Configurable Precision
* Calculate B&S time
* Add and check hash of config file to avoid unnecessary safe
* Read DiagSplit paper
* Make SCons react to changes in tools dir
* Freecam
* Make flextgl support an external template
* Rework Bound & Split dataflow
* Load Killeroo
* More complex scene format
  * Configurable Camera
* Catmull-Clark SDS
  * Read "Exact evaluation of catmull-clark subdivision surfaces at arbitrary parameter values"
  * Read "Exact Evaluation of Catmull-Clark Subdivision Surfaces Near B-spline Boundaries"
  * Read "Rapid Evaluation of Catmull-Clark Subdivision Surfaces"
  * Read "Approximating Catmull-clark Subdivision Surfaces with Bicubic Patches"
    Loop & Schaefer

